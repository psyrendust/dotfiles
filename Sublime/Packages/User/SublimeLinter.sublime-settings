/*
    SublimeLinter default settings
*/
{
    /*
        Sets the mode in which SublimeLinter runs:

        true - Linting occurs in the background as you type (the default).
        false - Linting only occurs when you initiate it.
        "load-save" - Linting occurs only when a file is loaded and saved.
        "save-only" - Linting occurs only when a file is saved.
    */
    "sublimelinter": "save-only",

    /*
        Maps language names **as listed at the beginning of the README** (but all lowercase)
        to executables for non-built in linters. If the executable is not in the default system path,
        or on posix systems is not in /usr/local/bin or ~/bin, then you must specify
        the full path to the executable. Note that paths in Windows must use double
        backslashes, for example "C:\\Program Files (x86)\\nodejs\\node.exe".

        Please note that the map _keys_ do not always match the name of the
        executable, but rather the language syntax for the executable to lint.

        This is the effective default map; your mappings may override these.

        "sublimelinter_executable_map":
        {
            "perl": "perl",
            "php": "php",
            "ruby": "ruby"
        },
    */
    "sublimelinter_executable_map":
    {
    },

    /*
        Maps syntax names to linters. This allows variations on a syntax
        (for example "Python (Django)") to be linted. The key is
        the name of the syntax **as it appears in the syntax list
        at the bottom right of the window**, and the value
        is the linter name **as listed in the README** (all lowercase)
        that the syntax maps to.
    */
    "sublimelinter_syntax_map":
    {
        "Python Django": "python",
        "Ruby on Rails": "ruby",
        "C++": "c"
    },

    // An array of linter names to disable. Names should be lowercase.
    "sublimelinter_disable":
    [
    ],

    /*
        The minimum delay in seconds (fractional seconds are okay) before
        a linter is run when the "sublimelinter" setting is true. This allows
        you to have background linting active, but defer the actual linting
        until you are idle. When this value is greater than the built in linting delay,
        errors are erased when the file is modified, since the assumption is
        you don't want to see errors while you type.
    */
    "sublimelinter_delay": 2,

    /*
        Selects the way the lines with errors or warnings are marked; "outline"
        (default) draws outline boxes around the lines, "fill" fills the lines
        with the outline color, and "none" disables all outline styles
        (useful if "sublimelinter_gutter_marks" is set).
    */
    "sublimelinter_mark_style": "outline",

    /*
        If true, lines with errors or warnings will be filled in with the
        outline color.

        This setting is DEPRECATED and will be ignored in future
        versions. Use "sublimelinter_mark_style" instead. For backwards
        compatibility reasons, this setting overrides "sublimelinter_mark_style"
        if that one is set to "outline", but has no effect if it's set to "none".
    */
    "sublimelinter_fill_outlines": false,

    // If true, lines with errors or warnings will have a gutter mark.
    "sublimelinter_gutter_marks": false,

    // If true, the find next/previous error commands will wrap.
    "sublimelinter_wrap_find": true,

    // If true, when the file is saved any errors will appear in a popup list
    "sublimelinter_popup_errors_on_save": false,

    // Javascript linter: "gjslint" to use the closure javascript linter (if available),
    // or either "jshint" or "jslint" to use a built in linter.
    "javascript_linter": "jshint",

    // jshint: options for linting JavaScript. See http://www.jshint.com/options/ for more info.
    // By deault, eval is allowed.
    "jshint_options":
    {
        // --------------------------------------------------------------------
        // JSHint Configuration, Strict Edition
        // --------------------------------------------------------------------
        //
        // This is a options template for [JSHint][1], using [JSHint example][2]
        // and [Ory Band's example][3] as basis and setting config values to
        // be most strict:
        //
        // * set all enforcing options to true
        // * set all relaxing options to false
        // * set all environment options to false, except the browser value
        // * set all JSLint legacy options to false
        //
        // [1]: http://www.jshint.com/
        // [2]: https://github.com/jshint/node-jshint/blob/master/example/defaults.json
        // [3]: https://github.com/oryband/dotfiles/blob/master/jshintrc
        // [4]: http://pivotal.github.com/jasmine/
        //
        // @author http://michael.haschke.biz/
        // @license http://unlicense.org/

        // == Enforcing Options ===============================================
        //
        // These options tell JSHint to be more strict towards your code. Use
        // them if you want to allow only a safe subset of JavaScript, very
        // useful when your codebase is shared with a big number of developers
        // with different skill levels.

        "bitwise"       : true,     // Prohibit bitwise operators (&, |, ^, etc.).
        "curly"         : true,     // Require {} for every new block or scope.
        "eqeqeq"        : true,     // Require triple equals i.e. `===`.
        "forin"         : true,     // Tolerate `for in` loops without `hasOwnPrototype`.
        "immed"         : true,     // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
        "latedef"       : true,     // Prohibit variable use before definition.
        "newcap"        : true,     // Require capitalization of all constructor functions e.g. `new F()`.
        "noarg"         : true,     // Prohibit use of `arguments.caller` and `arguments.callee`.
        "noempty"       : true,     // Prohibit use of empty blocks.
        "nonew"         : true,     // Prohibit use of constructors for side-effects.
        "plusplus"      : false,    // Prohibit use of `++` & `--`.
        "regexp"        : true,     // Prohibit `.` and `[^...]` in regular expressions.
        "undef"         : true,     // Require all non-global variables be declared before they are used.
        "strict"        : true,     // Require `use strict` pragma in every file.
        "trailing"      : true,     // Prohibit trailing whitespaces.

        // == Relaxing Options ================================================
        //
        // These options allow you to suppress certain types of warnings. Use
        // them only if you are absolutely positive that you know what you are
        // doing.

        "asi"           : false,    // Tolerate Automatic Semicolon Insertion (no semicolons).
        "boss"          : false,    // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
        "debug"         : false,    // Allow debugger statements e.g. browser breakpoints.
        "eqnull"        : false,    // Tolerate use of `== null`.
        "es5"           : false,    // Allow EcmaScript 5 syntax.
        "esnext"        : false,    // Allow ES.next specific features such as `const` and `let`.
        "evil"          : false,    // Tolerate use of `eval`.
        "expr"          : false,    // Tolerate `ExpressionStatement` as Programs.
        "funcscope"     : false,    // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
        "globalstrict"  : false,    // Allow global "use strict" (also enables 'strict').
        "iterator"      : false,    // Allow usage of __iterator__ property.
        "lastsemic"     : false,    // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
        "laxbreak"      : false,    // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
        "laxcomma"      : false,    // Suppress warnings about comma-first coding style.
        "loopfunc"      : false,    // Allow functions to be defined within loops.
        "multistr"      : false,    // Tolerate multi-line strings.
        "onecase"       : false,    // Tolerate switches with just one case.
        "proto"         : false,    // Tolerate __proto__ property. This property is deprecated.
        "regexdash"     : false,    // Tolerate unescaped last dash i.e. `[-...]`.
        "scripturl"     : false,    // Tolerate script-targeted URLs.
        "smarttabs"     : false,    // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
        "shadow"        : false,    // Allows re-define variables later in code e.g. `var x=1; x=2;`.
        "sub"           : false,    // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
        "supernew"      : false,    // Tolerate `new function () { ... };` and `new Object;`.
        "validthis"     : false,    // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function.

        // == Environments ====================================================
        //
        // These options pre-define global variables that are exposed by
        // popular JavaScript libraries and runtime environmentsâ€”such as
        // browser or node.js.
        "browser"       : true,     // Standard browser globals e.g. `window`, `document`.
        "couch"         : false,    // Enable globals exposed by CouchDB.
        "devel"         : false,    // Allow development statements e.g. `console.log();`.
        "dojo"          : false,    // Enable globals exposed by Dojo Toolkit.
        "jquery"        : false,    // Enable globals exposed by jQuery JavaScript library.
        "mootools"      : false,    // Enable globals exposed by MooTools JavaScript framework.
        "node"          : false,    // Enable globals available when code is running inside of the NodeJS runtime environment.
        "nonstandard"   : false,    // Define non-standard but widely adopted globals such as escape and unescape.
        "prototypejs"   : false,    // Enable globals exposed by Prototype JavaScript framework.
        "rhino"         : false,    // Enable globals available when your code is running inside of the Rhino runtime environment.
        "wsh"           : false,    // Enable globals available when your code is running as a script for the Windows Script Host.

        // == JSLint Legacy ===================================================
        //
        // These options are legacy from JSLint. Aside from bug fixes they will
        // not be improved in any way and might be removed at any point.

        "nomen"         : false,    // Prohibit use of initial or trailing underbars in names.
        "onevar"        : false,    // Allow only one `var` statement per function.
        "passfail"      : false,    // Stop on first error.
        "white"         : false,    // Check against strict whitespace and indentation rules.

        // == ECMAScript 5 ====================================================
        "es5"          : true,      // Whether ES5 syntax should be allowed.
        "strict"       : false,     // Whether the "use strict"; pragma should be required.
        "globalstrict" : false,     // Whether global "use strict"; should be allowed (also enables strict).

        // == Jasmine Unit Testing ============================================
        //
        // These options pre-define global functions that are exposed by
        // [Jasmine][4]
        "jasmine"      : false,
        "spyOn"        : false,
        "it"           : false,
        "console"      : false,
        "describe"     : false,
        "expect"       : false,
        "beforeEach"   : false,
        "waits"        : false,
        "waitsFor"     : false,
        "runs"         : false,

        // == Undocumented Options ============================================
        //
        // While I've found these options in [example1][2] and [example2][3]
        // they are not described in the [JSHint Options documentation][4].
        //
        // [4]: http://www.jshint.com/options/

        "maxerr"        : 100,      // Maximum errors before stopping.
        "predef"        : [         // Extra globals.
            // 3rd party
            "_",
            "$",
            "Backbone",
            "FB",
            "jQuery",
            "Modernizr",
            "ify",
            "module",
            // Tracking
            "_gaq",
            // AE libs
            "Modal",
            "Tabs",
            "Tooltip",
            "Validator",
            // AE presets
            "clearer",
            "jsContextRoot",
            "jsImageSrcPrepend",
            "nonSecurePrepend",
            "securePrepend",
            // require js
            "require",
            "define"
        ],
        "indent"        : 4,        // Specify indentation spacing
        "camelcase"     : false,
        "quotmark"      : "single",
        "unused"        : false
    },

    // A list of command line options to send to gjslint. --nobeep is always sent.
    "gjslint_options":
    [
    ],

    // A list of gjslint error numbers to ignore. The list of error codes is here:
    // http://closure-linter.googlecode.com/svn/trunk/closure_linter/errors.py
    "gjslint_ignore":
    [
        110  // line too long
    ],

    // CSSLint options:
    // Each rule can have three values: error|warning|true|false
    // false => rule is disabled.
    // true => alias to 'error'
    // All rules are enabled by default.
    // Currently the only difference between warnings and errors is in the prefix of the message in the Sublime status bar.
    "csslint_options":
    {
        "adjoining-classes": "warning",
        "box-model": true,
        "box-sizing": "warning",
        "compatible-vendor-prefixes": "warning",
        "display-property-grouping": true,
        "duplicate-background-images": "warning",
        "duplicate-properties": true,
        "empty-rules": true,
        "errors": true,
        "fallback-colors": "warning",
        "floats": "warning",
        "font-faces": "warning",
        "font-sizes": "warning",
        "gradients": "warning",
        "ids": "warning",
        "import": "warning",
        "important": "warning",
        "known-properties": true,
        "outline-none": "warning",
        "overqualified-elements": "warning",
        "qualified-headings": "warning",
        "regex-selectors": "warning",
        "rules-count": "warning",
        "shorthand": "warning",
        "star-property-hack": "warning",
        "text-indent": "warning",
        "underscore-property-hack": "warning",
        "unique-headings": "warning",
        "universal-selector": "warning",
        "vendor-prefix": true,
        "zero-units": "warning"
    },

    // Set this to false to turn pep8 checking off completely
    "pep8": true,

    /*
        A list of pep8 error numbers to ignore. By default "line too long" errors are ignored.
        The list of error codes is in this file: https://github.com/jcrocholl/pep8/blob/master/pep8.py.
        Search for "Ennn:", where nnn is a 3-digit number.
    */
    "pep8_ignore":
    [
        "E501"
    ],

    /*
        If you use SublimeLinter for pyflakes checks, you can ignore some of the "undefined name xxx"
        errors (comes in handy if you work with post-processors, globals/builtins available only at runtime, etc.).
        You can control what names will be ignored with the user setting "pyflakes_ignore".

        Example:

        "pyflakes_ignore":
            [
                "some_custom_builtin_o_mine",
                "A_GLOBAL_CONSTANT"
            ],
    */
    "pyflakes_ignore":
    [
    ],

    /*
        Ordinarily pyflakes will issue a warning when 'from foo import *' is used,
        but it is ignored since the warning is not that helpful. If you want to see this warning,
        set this option to false.
    */
    "pyflakes_ignore_import_*": true,

    /*
        Perl linter: "perl" to use the Perl language syntax check, or "perlcritic" to use Perl::Critic linting.
        Perl is now set to use "perlcritic" by default due to a vulnerability with blindly running `perl -c`
        on files with `BEGIN` or `CHECK` blocks.
    */
    "perl_linter": "perlcritic",

    // Objective-J: if true, non-ascii characters are flagged as an error.
    "sublimelinter_objj_check_ascii": false,

    // Set to true to highlight annotations
    "sublimelinter_notes": false,

    // The set of annotation phrases to highlight
    "annotations": ["TODO", "README", "FIXME"]
}
