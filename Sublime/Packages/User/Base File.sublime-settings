{
  /*
    Sets the mode in which SublimeCodeIntel runs:

    true - Enabled (the default).
    false - Disabled.
  */
  "codeintel": true,

  // An array of language names which are disabled.
  "codeintel_disabled_languages": [
  ],

  /*
    Sets the mode in which SublimeCodeIntel's live autocomplete runs:

    true - Autocomplete popups as you type (the default).
    false - Autocomplete popups only when you request it.
  */
  "codeintel_live": true,

  // An array of language names to disable.
  "codeintel_live_disabled_languages": [
  ],

  /*
    Maps syntax names to languages. This allows variations on a syntax
    (for example "Python (Django)") to be used. The key is
    the base filename of the .tmLanguage syntax files, and the value
    is the syntax it maps to.
  */
  "codeintel_syntax_map": {
    "Python Django": "Python"
  },

  /*
    Define filters per language to exclude paths from scanning.
    ex: "JavaScript":["/build/"]
  */
  "codeintel_scan_exclude_dir": {
    "JavaScript": [
      "/build/"
    ]
  },

  // If the indent level of a multi-line selection should be aligned
  "align_indent": true,

  // If indentation is done via tabs, set this to true to also align
  // mid-line characters via tabs. This may cause alignment issues when
  // viewing the file in an editor with different tab width settings. This
  // will also cause multi-character operators to be left-aligned to the
  // first character in the operator instead of the character from the
  // "alignment_chars" setting.
  "mid_line_tabs": false,

  // The mid-line characters to align in a multi-line selection, changing
  // this to an empty array will disable mid-line alignment
  "alignment_chars": ["=", ":", ","],

  // If the following character is matched for alignment, insert a space
  // before it in the final alignment
  "alignment_space_chars": ["="],

  // The characters to align along with "alignment_chars"
  // For instance if the = is to be aligned, there are a number of
  // symbols that can be combined with the = to make an operator, and all
  // of those must be kept next to the = for the operator to be parsed
  "alignment_prefix_chars": [
    "+", "-", "&", "|", "<", ">", "!", "~", "%", "/", "*", "."
  ]
}