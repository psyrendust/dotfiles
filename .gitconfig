[alias]
	pu = push origin master
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --

	# View the SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph
	# View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	pl = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	cr = clone --recursive
	# Add all changes
	a = add -A
	cm = commit -m
	# Commit all changes
	ca = !git add -A && git commit -vm
	# Switch to a branch
	co = checkout
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Undo a `git push`
	undopush = push -f origin HEAD^:master
	# Undo a `git commit`
	undocommit = reset --soft HEAD^
	# Unstage a file
	unstage = reset HEAD --
	# Recursively take action on submodules: git add -A
	fea = "submodule foreach git add -A"
	# Recursively take action on submodules: git commit -m
	fecm = "submodule foreach git commit -m"
	# git merge with the --no-ff flag. This causes the merge to always create a
	# new commit object, even if the merge could be performed with a fast-forward.
	# This avoids losing information about the historical existence of a feature
	# branch and groups together all commits that together added the feature.
	# http://nvie.com/posts/a-successful-git-branching-model/
	m = merge --no-ff

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal
	ui = always
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix
[core]
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	whitespace = fix,space-before-tab,tab-in-indent,trailing-space
	editor = sbl -w
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"

# Any GitHub repo with my username should be checked out r/w by default
# http://rentzsch.tumblr.com/post/564806957/public-but-hackable-git-submodules
[url "git@github.com:psyrendust/"]
  insteadOf = "git://github.com/psyrendust/"

[difftool "Kaleidoscope"]
	cmd = ksdiff-wrapper git \"$LOCAL\" \"$REMOTE\"
[difftool]
	prompt = false
[diff]
	tool = Kaleidoscope
[user]
	name = Larry Gordon
	email = larry@johnmcneilstudio.com
